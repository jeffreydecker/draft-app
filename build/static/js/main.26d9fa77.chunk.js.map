{"version":3,"sources":["logo.svg","AppBar.js","PlayerDialog.js","TeamsTable.js","PlayersTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","withStyles","root","flexGrow","grow","menuButton","marginLeft","marginRight","props","classes","react_default","a","createElement","className","AppBar_default","position","Toolbar_default","IconButton_default","color","aria-label","Menu_default","Typography_default","variant","Button_default","ResponsiveDialog","handleClose","_this","onClose","this","fullScreen","Modal_default","centered","show","open","onHide","Header","closeButton","Title","Body","Footer","react_bootstrap_Button_default","onClick","React","Component","columns","TeamsTable","state","league","dialogOpen","handlePlayerClick","event","id","setState","handleDialogClose","fetch","response","json","players","sort","b","_player","rank","status","Error","_this2","Table_default","responsive","striped","hover","map","title","index","align","teams","team","key","_id","component","scope","name","budget","rosterSize","length","PlayerDialog","rankings","hitting","pitching","PlayersTable","playerData","player","Number","MAX_SAFE_INTEGER","push","pos","App","src_AppBar","src_TeamsTable","src_PlayersTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oTC8CzBC,2BApCA,CACbC,KAAM,CACJC,SAAU,GAEZC,KAAM,CACJD,SAAU,GAEZE,WAAY,CACVC,YAAa,GACbC,YAAa,KA2BFN,CAvBf,SAAsBO,GAAO,IACnBC,EAAYD,EAAZC,QACR,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQP,MACtBQ,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,SAAS,UACfL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACED,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYE,UAAWJ,EAAQJ,WAAYa,MAAM,UAAUC,aAAW,QACpET,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,OAEFD,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAYW,QAAQ,KAAKJ,MAAM,UAAUL,UAAWJ,EAAQL,MAA5D,aAGAM,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAQO,MAAM,WAAd,yECHKM,6MA1BbC,YAAc,WACZC,EAAKlB,MAAMmB,mFAIYC,KAAKpB,MAApBqB,WAER,OACEnB,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CAAOoB,UAAQ,EAACC,KAAMJ,KAAKpB,MAAMyB,KAAMC,OAAQN,KAAKH,aAClDf,EAAAC,EAAAC,cAACkB,EAAAnB,EAAMwB,OAAP,CAAcC,aAAW,GACvB1B,EAAAC,EAAAC,cAACkB,EAAAnB,EAAM0B,MAAP,uBAEF3B,EAAAC,EAAAC,cAACkB,EAAAnB,EAAM2B,KAAP,qDACA5B,EAAAC,EAAAC,cAACkB,EAAAnB,EAAM4B,OAAP,KACE7B,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAD,CAAQW,QAAQ,YAAYmB,QAASb,KAAKH,aAA1C,SAGAf,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAD,CAAQW,QAAQ,UAAUmB,QAASb,KAAKH,aAAxC,yBAnBqBiB,IAAMC,4BCA/BC,EAAU,CAAC,OAAQ,UAAW,SAAU,aAAc,WA2D7CC,6MAxDXC,MAAQ,CACJC,OAAQ,KACRC,YAAY,KAGhBC,kBAAoB,SAACC,EAAOC,GACxBzB,EAAK0B,SAAS,CAACJ,YAAY,OAG/BK,kBAAoB,WAChB3B,EAAK0B,SAAS,CAACJ,YAAY,wNAINM,MAAM,+FAAvBC,kBACiBA,EAASC,kBAAxBT,UAECU,QAAQC,KAAK,SAAS/C,EAAGgD,GAAG,OAAOhD,EAAEiD,QAAQC,KAAOF,EAAEC,QAAQC,OAE7C,MAApBN,EAASO,6BAAsBC,MAAM,4CAEzCnC,KAAKwB,SAAS,CAACL,OAAQA,wIAGlB,IAAAiB,EAAApC,KACL,OACIlB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACqD,EAAAtD,EAAD,CAAOuD,WAAW,KAAKC,SAAO,EAACC,OAAK,GAChC1D,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACKgC,EAAQyB,IAAI,SAACC,EAAOC,GAAR,OACT7D,EAAAC,EAAAC,cAAA,MAAI4D,MAAOD,EAAQ,EAAI,QAAU,QAASD,OAItD5D,EAAAC,EAAAC,cAAA,aACKgB,KAAKkB,MAAMC,OACRnB,KAAKkB,MAAMC,OAAO0B,MAAMJ,IAAI,SAAAK,GAAI,OAC5BhE,EAAAC,EAAAC,cAAA,MAAI+D,IAAKD,EAAKE,IAAKnC,QAAS,SAAAS,GAAK,OAAIc,EAAKf,kBAAkBC,EAAOwB,EAAKE,OACpElE,EAAAC,EAAAC,cAAA,MAAIiE,UAAU,KAAKC,MAAM,OAAOJ,EAAKK,MACrCrE,EAAAC,EAAAC,cAAA,MAAI4D,MAAM,SAAV,QAAwBR,EAAKlB,MAAMC,OAAOiC,QAC1CtE,EAAAC,EAAAC,cAAA,MAAI4D,MAAM,SAASR,EAAKlB,MAAMC,OAAOiC,OAArC,OAAiDhB,EAAKlB,MAAMC,OAAOiC,QACnEtE,EAAAC,EAAAC,cAAA,MAAI4D,MAAM,SAASR,EAAKlB,MAAMC,OAAOkC,WAAaP,EAAKjB,QAAQyB,QAC/DxE,EAAAC,EAAAC,cAAA,MAAI4D,MAAM,SAAV,QAGN9D,EAAAC,EAAAC,cAAA,wBAIdF,EAAAC,EAAAC,cAACuE,EAAD,CAAelD,KAAML,KAAKkB,MAAME,WAAYrB,QAASC,KAAKyB,4BAnDjDV,aCFnBC,EAAU,CACZwC,SAAU,CAAC,IAAK,OAAQ,YAAa,QACrCC,QAAS,GACTC,SAAU,IAqECC,6MAjEXzC,MAAQ,CACJC,OAAQ,KACRC,YAAY,KAGhBC,kBAAoB,SAACC,EAAOC,GACxBzB,EAAK0B,SAAS,CAACJ,YAAY,OAG/BK,kBAAoB,WAChB3B,EAAK0B,SAAS,CAACJ,YAAY,wNAINM,MAAM,+FAAvBC,kBACiBA,EAASC,kBAAxBT,UAECU,QAAQC,KAAK,SAAS/C,EAAGgD,GAAG,OAAOhD,EAAEiD,QAAQC,KAAOF,EAAEC,QAAQC,OAE7C,MAApBN,EAASO,6BAAsBC,MAAM,4CAEzCnC,KAAKwB,SAAS,CAACL,OAAQA,wIAGlB,IAAAiB,EAAApC,KACD4D,EAAa,GAUjB,OARI5D,KAAKkB,MAAMC,QACXnB,KAAKkB,MAAMC,OAAOU,QAAQY,IAAI,SAAAoB,GAC1B,IAAI5B,EAAO4B,EAAO7B,QAAQC,KACtBA,GAAQ6B,OAAOC,mBAAoB9B,EAAO,MAC9C2B,EAAWI,KAAK,CAACzC,GAAIsC,EAAOb,IAAKf,KAAMA,EAAMkB,KAAMU,EAAO7B,QAAQmB,KAAMc,IAAKJ,EAAO7B,QAAQiC,IAAKnB,KAAMe,EAAO7B,QAAQc,SAK1HhE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACqD,EAAAtD,EAAD,CAAOuD,WAAW,KAAKC,SAAO,EAACC,OAAK,GAChC1D,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACKgC,EAAQwC,SAASf,IAAI,SAAAC,GAAK,OACvB5D,EAAAC,EAAAC,cAAA,UAAK0D,OAIjB5D,EAAAC,EAAAC,cAAA,aACKgB,KAAKkB,MAAMC,OACRnB,KAAKkB,MAAMC,OAAOU,QAAQY,IAAI,SAAAoB,GAAM,OAChC/E,EAAAC,EAAAC,cAAA,MAAI+D,IAAKc,EAAOb,IAAKnC,QAAS,SAAAS,GAAK,OAAIc,EAAKf,kBAAkBC,EAAOuC,EAAOb,OACxElE,EAAAC,EAAAC,cAAA,MAAIiE,UAAU,KAAKC,MAAM,OAAOW,EAAO7B,QAAQC,MAAQ6B,OAAOC,iBAAmB,KAAOF,EAAO7B,QAAQC,MACvGnD,EAAAC,EAAAC,cAAA,MAAI4D,MAAM,SAASiB,EAAO7B,QAAQmB,MAClCrE,EAAAC,EAAAC,cAAA,MAAI4D,MAAM,SAASiB,EAAO7B,QAAQiC,KAClCnF,EAAAC,EAAAC,cAAA,MAAI4D,MAAM,SAASiB,EAAO7B,QAAQc,SAGxChE,EAAAC,EAAAC,cAAA,wBAIdF,EAAAC,EAAAC,cAACuE,EAAD,CAAelD,KAAML,KAAKkB,MAAME,WAAYrB,QAASC,KAAKyB,4BA5D/CV,aCSZmD,mLAVX,OACEpF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmF,EAAD,MACArF,EAAAC,EAAAC,cAACoF,EAAD,MACAtF,EAAAC,EAAAC,cAACqF,EAAD,cANUtD,aCKEuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9F,EAAAC,EAAAC,cAAC6F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.26d9fa77.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n};\n\nfunction ButtonAppBar(props) {\n  const { classes } = props;\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n            Draft App\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nButtonAppBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(ButtonAppBar);","import React from 'react';\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\n\nclass ResponsiveDialog extends React.Component {\n\n  handleClose = () => {\n    this.props.onClose();\n  };\n\n  render() {\n    const { fullScreen } = this.props;\n\n    return (\n      <Modal centered show={this.props.open} onHide={this.handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Modal heading</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={this.handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={this.handleClose}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nexport default ResponsiveDialog;","import React, { Component } from 'react';\nimport PlayersDialog from './PlayerDialog'\nimport Table from 'react-bootstrap/Table'\n\nconst columns = ['Name', '$ Spent', '$ Left', 'Picks Left', 'Max Bid'];\n\nclass TeamsTable extends Component {\n    state = {\n        league: null,\n        dialogOpen: false,\n    };\n\n    handlePlayerClick = (event, id) => {\n        this.setState({dialogOpen: true})\n    }\n\n    handleDialogClose = () => {\n        this.setState({dialogOpen: false})\n    }\n\n    async componentDidMount() {\n        var response = await fetch('https://pure-bastion-69696.herokuapp.com/api/leagues/5c6a1e6f5447a601b68f255d');\n        const league = await response.json();\n    \n        league.players.sort(function(a, b){return a._player.rank - b._player.rank})\n\n        if (response.status !== 200) throw Error(\"Error fetching stats and rankings\");\n    \n        this.setState({league: league});\n    }\n\n    render() {\n        return (\n            <div>\n                <Table responsive=\"sm\" striped hover>\n                    <thead>\n                        <tr>\n                            {columns.map((title, index) => (\n                                <th align={index > 0 ? \"right\" : \"left\"}>{title}</th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.league ? \n                            this.state.league.teams.map(team => (\n                                <tr key={team._id} onClick={event => this.handlePlayerClick(event, team._id)}>\n                                    <td component=\"th\" scope=\"row\">{team.name}</td>\n                                    <td align=\"right\">0 of {this.state.league.budget}</td>\n                                    <td align=\"right\">{this.state.league.budget} of {this.state.league.budget}</td>\n                                    <td align=\"right\">{this.state.league.rosterSize - team.players.length}</td>\n                                    <td align=\"right\">?</td>\n                                </tr>\n                            ))\n                            : <div>Loading</div>\n                        }\n                    </tbody>\n                </Table>\n                <PlayersDialog open={this.state.dialogOpen} onClose={this.handleDialogClose}/>\n            </div>\n        );\n    }\n}\n \nexport default TeamsTable;","import React, { Component } from 'react';\nimport PlayersDialog from './PlayerDialog'\nimport Table from 'react-bootstrap/Table'\n\nconst columns = {\n    rankings: ['#', 'Name', 'Positions', 'Team'],\n    hitting: [],\n    pitching: [],\n};\n\nclass PlayersTable extends Component {\n    state = {\n        league: null,\n        dialogOpen: false,\n    };\n\n    handlePlayerClick = (event, id) => {\n        this.setState({dialogOpen: true})\n    }\n\n    handleDialogClose = () => {\n        this.setState({dialogOpen: false})\n    }\n\n    async componentDidMount() {\n        var response = await fetch('https://pure-bastion-69696.herokuapp.com/api/leagues/5c6a1e6f5447a601b68f255d');\n        const league = await response.json();\n    \n        league.players.sort(function(a, b){return a._player.rank - b._player.rank})\n\n        if (response.status !== 200) throw Error(\"Error fetching stats and rankings\");\n    \n        this.setState({league: league});\n    }\n\n    render() {\n        var playerData = [];\n\n        if (this.state.league) {\n            this.state.league.players.map(player => {\n                var rank = player._player.rank\n                if (rank == Number.MAX_SAFE_INTEGER) { rank = 'NA' }\n                playerData.push({id: player._id, rank: rank, name: player._player.name, pos: player._player.pos, team: player._player.team})\n            })\n        }\n\n        return (\n            <div>\n                <Table responsive=\"sm\" striped hover>\n                    <thead>\n                        <tr>\n                            {columns.rankings.map(title => (\n                                <th>{title}</th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.league ? \n                            this.state.league.players.map(player => (\n                                <tr key={player._id} onClick={event => this.handlePlayerClick(event, player._id)}>\n                                    <td component=\"th\" scope=\"row\">{player._player.rank == Number.MAX_SAFE_INTEGER ? 'NA' : player._player.rank}</td>\n                                    <td align=\"right\">{player._player.name}</td>\n                                    <td align=\"right\">{player._player.pos}</td>\n                                    <td align=\"right\">{player._player.team}</td>\n                                </tr>\n                            ))\n                            : <div>Loading</div>\n                        }\n                    </tbody>\n                </Table>\n                <PlayersDialog open={this.state.dialogOpen} onClose={this.handleDialogClose}/>\n            </div>\n        );\n    }\n}\n \nexport default PlayersTable;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AppBar from './AppBar';\nimport TeamsTable from './TeamsTable';\nimport PlayersTable from './PlayersTable';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AppBar />\n        <TeamsTable />\n        <PlayersTable />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}